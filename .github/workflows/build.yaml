name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  windows:
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x64, Win32]
      fail-fast: false
    env:
        PLATFORM: ${{ matrix.arch }}
        COMPILER: MSVC22    
        VCPKG_INSTALLATION_ROOT: c:\vcpkg
        VCPKG_BUILD_TYPE: release
        BUILD_TYPE: RelWithDebInfo
        ENABLE_GRPC: On
    steps:
    - uses: actions/checkout@v2
      with:      
        fetch-depth: 100
    - name: Fetch tags
      run: git fetch --depth=100 origin +refs/tags/*:refs/tags/*
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.12
      with:
        cmake-version: 'latest'
    - uses: martijnhols/actions-cache/restore@v3
      id: cache
      with:
        path: |
          ${{ env.VCPKG_INSTALLATION_ROOT }}\archives
          ${{ env.VCPKG_INSTALLATION_ROOT }}\build*
          ${{ env.VCPKG_INSTALLATION_ROOT }}\buildtrees
          ${{ env.VCPKG_INSTALLATION_ROOT }}\downloads
          ${{ env.VCPKG_INSTALLATION_ROOT }}\installed*
          ${{ env.VCPKG_INSTALLATION_ROOT }}\packages
          ${{ github.workspace }}\build\cpp_src\rocksdb_lib-prefix
          ~\AppData\Local\vcpkg
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-${{ matrix.arch }}-v4-${{ hashFiles('*.lib') }}
        restore-keys: ${{ runner.os }}-${{ matrix.arch }}-v4-
    - name: Dependencies
      run: |
        cmake --version
        pip3 install --upgrade pip
        pip3 install wheel
        pip3 install grpcio
        pip3 install grpcio-tools
    - name: Setup Vcpkg
      run: |
        echo ("VCPKG_ROOT=$($env:VCPKG_INSTALLATION_ROOT)") >> $env:GITHUB_ENV
        $env:VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT
        if (!(Test-Path -Path $env:VCPKG_ROOT))
        {
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT --depth 1
          cd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat
        }
        cd $env:VCPKG_ROOT
        .\vcpkg integrate install
        git fetch --all --depth 1
        git pull
        .\vcpkg update
    - name: Install Vcpkg Packages
      run: |
        cd $env:VCPKG_ROOT
        if ($env:PLATFORM -eq "x64"){ $env:VCPKG_TARGET_TRIPLET="x64-windows-static" }
        if ($env:PLATFORM -eq "Win32"){ $env:VCPKG_TARGET_TRIPLET="x86-windows-static" }
        vcpkg list --triplet $env:VCPKG_TARGET_TRIPLET
        .\vcpkg upgrade --no-dry-run --keep-going
        .\vcpkg remove --outdated
        $env:VCPKG_DEFAULT_TRIPLET=$env:VCPKG_TARGET_TRIPLET
        echo ("VCPKG_TARGET_TRIPLET=$($env:VCPKG_TARGET_TRIPLET)") >> $env:GITHUB_ENV
        echo ("VCPKG_DEFAULT_TRIPLET=$($env:VCPKG_DEFAULT_TRIPLET)") >> $env:GITHUB_ENV
        Add-Content -Path .\triplets\*.cmake "set(VCPKG_BUILD_TYPE release)`nset(VCPKG_LIBRARY_LINKAGE static)`nset(VCPKG_CRT_LINKAGE static)"        
        New-Item -ItemType Directory -Force -Path "$($env:VCPKG_ROOT)\\installed\\$($env:VCPKG_TARGET_TRIPLET)\\lib\\"
        .\vcpkg install zlib zstd lz4 crc32c snappy[*] protobuf[*] grpc[*] --triplet $env:VCPKG_TARGET_TRIPLET --recurse --keep-going --binarycaching --binarysource=default,readwrite
        dir "$($env:VCPKG_ROOT)\\installed\\$($env:VCPKG_TARGET_TRIPLET)\\lib\\"
        copy "$($env:VCPKG_ROOT)\\installed\\$($env:VCPKG_TARGET_TRIPLET)\\lib\\*.lib" $env:GITHUB_WORKSPACE #for cache key hashFiles
    - name: Build Reindexer
      run: |
        $env:VCPKG_TARGET_TRIPLET="${{ env.VCPKG_TARGET_TRIPLET }}"
        $env:THIRDPARTY_HOME="$($env:VCPKG_ROOT)\\installed\\$($env:VCPKG_TARGET_TRIPLET)"
        $env:ZSTD_INCLUDE="$($env:THIRDPARTY_HOME)\\include"
        $env:ZSTD_LIB_RELEASE="$($env:THIRDPARTY_HOME)\\lib\zstd.lib"
        $env:ZLIB_INCLUDE="$($env:THIRDPARTY_HOME)\\include"
        $env:ZLIB_LIB_RELEASE="$($env:THIRDPARTY_HOME)\\lib\zlib.lib"
        $env:LZ4_INCLUDE="$($env:THIRDPARTY_HOME)\\include"
        $env:LZ4_LIB_RELEASE="$($env:THIRDPARTY_HOME)\\lib\lz4.lib"
        $env:SNAPPY_INCLUDE="$($env:THIRDPARTY_HOME)\\include"
        $env:SNAPPY_LIB_RELEASE="$($env:THIRDPARTY_HOME)\\lib\snappy.lib"
        $env:JEMALLOC_INCLUDE="$($env:GITHUB_WORKSPACE)\\externals\\jemalloc\\include\\"
        $env:JEMALLOC_LIB_RELEASE="$($env:GITHUB_WORKSPACE)\\externals\\jemalloc\\lib\\$($env:PLATFORM)\\jemalloc.lib"
        cd $env:GITHUB_WORKSPACE
        git describe --tags
        if (!(Test-Path -Path build)){ mkdir build }
        cd build            
        cmake -G "Visual Studio 17 2022" -A "$($env:PLATFORM)" -DCMAKE_TOOLCHAIN_FILE="$($env:VCPKG_ROOT)/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE="$($env:BUILD_TYPE)" -DVCPKG_TARGET_TRIPLET="$($env:VCPKG_TARGET_TRIPLET)" -DLINK_TYPE=Static -DENABLE_GRPC="$($env:ENABLE_GRPC)" ..
        cmake --build . --config "$($env:BUILD_TYPE)"
    - name: Save Deps to cache
      if: always() #&& steps.cache.outputs.cache-hit != 'true'
      uses: martijnhols/actions-cache/save@v3
      with:
        path: |
          ${{ env.VCPKG_INSTALLATION_ROOT }}\archives
          ${{ env.VCPKG_INSTALLATION_ROOT }}\build*
          ${{ env.VCPKG_INSTALLATION_ROOT }}\buildtrees
          ${{ env.VCPKG_INSTALLATION_ROOT }}\downloads
          ${{ env.VCPKG_INSTALLATION_ROOT }}\installed*
          ${{ env.VCPKG_INSTALLATION_ROOT }}\packages
          ${{ github.workspace }}\build\cpp_src\rocksdb_lib-prefix
          ~\AppData\Local\vcpkg
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-${{ matrix.arch }}-v4-${{ hashFiles('*.lib') }}
    - name: Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-${{ matrix.arch }}-lib
        path: |
            build\cpp_src\server\cbinding\**\reindexer_embedded_server.dll
            build\cpp_src\server\cbinding\**\reindexer_embedded_server.pdb

  unix:
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-10.15]
      fail-fast: false
    runs-on: ${{matrix.os}}
    env:
      OS: ${{matrix.os}}
      BUILD_TYPE: MinSizeRel
      ENABLE_LIBUNWIND: 0
      ENABLE_TCMALLOC: 0
      ENABLE_JEMALLOC: 1
      ENABLE_GRPC: 1
      WITH_PYTHON: 0
      WITH_DOXYGEN: 0 # set to 1 when doxy doc deploy is ready
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 100
    - name: Fetch tags
      run: git fetch --depth=100 origin +refs/tags/*:refs/tags/*
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.12
      with:
        cmake-version: 'latest'
    - uses: martijnhols/actions-cache/restore@v3
      id: cache
      with:
        path: |
          /opt/diet
          ~/deps
          ~/.cache/pip
          $HOME/Library/Caches/Homebrew
          /usr/local/Homebrew
          ~/Library/Caches/pip
        key: ${{ matrix.os }}-v4-${{ hashFiles('*.a') }}
        restore-keys: ${{ matrix.os }}-v4-
    - name: Setup Ubuntu
      if: startsWith(matrix.os,'ubuntu')
      run: |        
        echo 'SED=sed' >> $GITHUB_ENV
        echo 'SECTION_FLAGS=-ffunction-sections -fdata-sections -Wl,--gc-sections' >> $GITHUB_ENV # -rdynamic"
        echo 'LIBUNWIND_LIB=/usr/lib/x86_64-linux-gnu/libunwind.a' >> $GITHUB_ENV
        
        sudo apt-get -qq update > /dev/null && sudo apt-get -qq install -y -f build-essential binutils autopoint libunwind-dev curl git flex python3-dev python3-pip python3-venv python3-wheel python3-setuptools libssl-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-10 10
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-10 10
        export CXX="g++-10" CC="gcc-10" AR="gcc-ar-10" NM="gcc-nm-10" RANLIB="gcc-ranlib-10"
        echo "CC=${CC}" >> $GITHUB_ENV
        echo "CXX=${CXX}" >> $GITHUB_ENV
        echo "AR=${AR}" >> $GITHUB_ENV
        echo "NM=${NM}" >> $GITHUB_ENV
        echo "RANLIB=${RANLIB}" >> $GITHUB_ENV
        export CMAKE_C_COMPILER="/usr/bin/gcc-10"
        export CMAKE_CXX_COMPILER="/usr/bin/g++-10"
        export CMAKE_AR="/usr/bin/gcc-ar-10"
        export CMAKE_NM="/usr/bin/gcc-nm-10"
        export CMAKE_RANLIB="/usr/bin/gcc-ranlib-10"
        cc --version && ar --version && nm --version && ranlib --version && ld --version
    - name: Setup Macos
      if: startsWith(matrix.os,'macos')
      run: |
        echo 'SED=gsed' >> $GITHUB_ENV
        echo 'SECTION_FLAGS=-ffunction-sections -fdata-sections -flto' >> $GITHUB_ENV
        #echo 'LIBUNWIND_LIB=' >> $GITHUB_ENV
              
        brew update > /dev/null && brew install gnu-sed flex gettext autoconf automake libtool cvs python pkg-config openssl@1.1 # re2
        export PATH=${PATH}:/usr/local/opt/gettext/bin
        brew link --force openssl@1.1
        export PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig"
        pkg-config --modversion openssl
        sudo sysctl -w kern.maxfiles=20480 && sudo sysctl -w kern.maxfilesperproc=20480 && sudo launchctl limit maxfiles 20480
        ulimit -S -n 20480 && ulimit -n                
    - name: Setup Common
      run: |
        cmake --version
        pip3 install --upgrade pip
        pip3 install wheel
        pip3 install grpcio      
        pip3 install grpcio-tools
        export REINDEXER_OPTS="-DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DENABLE_LIBUNWIND=${ENABLE_LIBUNWIND} -DENABLE_JEMALLOC=${ENABLE_JEMALLOC} -DENABLE_TCMALLOC=${ENABLE_TCMALLOC} -DENABLE_GRPC=${ENABLE_GRPC} -DWITH_PYTHON=${WITH_PYTHON}"
        echo "REINDEXER_OPTS=$REINDEXER_OPTS" >> $GITHUB_ENV
    - name: Build Static Dependencies
      run: |
        echo '::echo::off'
        echo "::group::Set Compiler Flags"
        export CFLAGS="-g0 -Os -fPIC" # -fvisibility=hidden ${SECTION_FLAGS}"
        export CXXFLAGS="-g0 -Os -fPIC" # -fvisibility=hidden -fvisibility-inlines-hidden ${SECTION_FLAGS}"
        COMMON_MAKE_ARGS=(--no-print-directory -j4 CFLAGS="${CFLAGS}" CXXFLAGS="${CFLAGS}" PREFIX=/usr/local)
        COMMON_CMAKE_ARGS=(-DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_POSITION_INDEPENDENT_CODE=1 -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" -DCMAKE_LINK_SEARCH_START_STATIC=1 -DCMAKE_LINK_SEARCH_END_STATIC=1)
        echo "::endgroup::"
        echo "::group::Google Test & Benchmark & PerfTools"
        if [[ ! -d "$HOME/deps/googletest/.git" ]]; then git clone https://github.com/google/googletest.git ~/deps/googletest --depth 1; fi && cd ~/deps/googletest && git pull && cmake -DBUILD_GMOCK=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-std=c++11" . && make -j4 && sudo make install VERBOSE=1
        if [[ ! -d "$HOME/deps/googlebench/.git" ]]; then git clone --branch v1.4.0 https://github.com/google/benchmark.git ~/deps/googlebench --depth 1; fi && cd ~/deps/googlebench && cmake -DBENCHMARK_ENABLE_TESTING=Off -DCMAKE_BUILD_TYPE=Release . && make -j4 && sudo make install VERBOSE=1
        if [[ ${ENABLE_TCMALLOC} -eq 1 ]]; then if [[ ! -d "$HOME/deps/gperftools/.git" ]]; then git clone --branch master https://github.com/gperftools/gperftools.git ~/deps/gperftools --depth 1 && cd ~/deps/gperftools && ./autogen.sh; fi && cd ~/deps/gperftools && git pull && ./configure --disable-shared --enable-static --enable-libunwind=${ENABLE_LIBUNWIND} --enable-frame-pointers CFLAGS="${CFLAGS}" CXXFLAGS="${CFLAGS}" && make "${COMMON_MAKE_ARGS[@]}" && sudo make install VERBOSE=1; else sudo rm -rf  /usr/local/lib/*tcmalloc.*; fi
        echo "::endgroup::"
        echo "::group::Zlib"
        if [[ ! -d "$HOME/deps/zlib/.git" ]]; then git clone --branch master https://github.com/madler/zlib.git ~/deps/zlib; fi && cd ~/deps/zlib && ./configure --static && make libz.a "${COMMON_MAKE_ARGS[@]}" && sudo make install libz.a VERBOSE=1 && sudo rm -rf /usr/local/lib/libz.so* /usr/local/lib/libz.dylib* 
        echo "::endgroup::"
        echo "::group::Bzip2"
        if [[ ! -d "$HOME/deps/bzip2/.git" ]]; then git clone --branch master https://sourceware.org/git/bzip2.git ~/deps/bzip2; fi && cd ~/deps/bzip2 && git pull && make libbz2.a "${COMMON_MAKE_ARGS[@]}" && sudo make install libbz2.a VERBOSE=1 && sudo rm -rf /usr/local/lib/libbz2.so* /usr/local/lib/libbz2.dylib*
        echo "::endgroup::"
        echo "::group::Lz4"
        if [[ ! -d "$HOME/deps/lz4/.git" ]]; then git clone --branch release https://github.com/lz4/lz4.git ~/deps/lz4 --depth 1; fi && cd ~/deps/lz4 && git pull && make liblz4.a "${COMMON_MAKE_ARGS[@]}" && sudo make uninstall VERBOSE=1 && sudo make install liblz4.a VERBOSE=1 && sudo rm -rf /usr/local/lib/liblz4.so* /usr/local/lib/liblz4.dylib*
        echo "::endgroup::"
        echo "::group::Zstd"
        if [[ ! -d "$HOME/deps/zstd/.git" ]]; then git clone --branch master https://github.com/facebook/zstd.git ~/deps/zstd --depth 1 && mkdir -p ~/deps/zstd/build/cmake/build; fi && cd ~/deps/zstd/build/cmake/build && git pull && cmake -DZSTD_BUILD_TESTS=OFF -DZSTD_BUILD_PROGRAMS=OFF -DZSTD_BUILD_STATIC=ON -DZSTD_BUILD_SHARED=OFF ${COMMON_CMAKE_ARGS[*]} .. && make -j4 && sudo make install VERBOSE=1 && sudo rm -rf /usr/local/lib/libzstd.so* /usr/local/lib/libzstd.dylib*
        echo "::endgroup::"
        echo "::group::Lzma"
        if [[ ${ENABLE_LIBUNWIND} -eq 1 ]]; then if [[ ! -d "$HOME/deps/liblzma/.git" ]]; then git clone --branch master https://github.com/kobolabs/liblzma.git ~/deps/liblzma --depth 1 && cd ~/deps/liblzma && ./autogen.sh; fi && cd ~/deps/liblzma && git pull && ./configure --disable-shared CFLAGS="${CFLAGS}" CXXFLAGS="${CFLAGS}" && make "${COMMON_MAKE_ARGS[@]}" && sudo make install VERBOSE=1; else sudo rm -rf /usr/lib/x86_64-linux-gnu/liblzma.a; fi
        echo "::endgroup::"
        echo "::group::Crc32"
        if [[ ! -d "$HOME/deps/crc32c/.git" ]]; then git clone --branch main https://github.com/google/crc32c.git ~/deps/crc32c --depth 1 && mkdir -p ~/deps/crc32c/build; fi && cd ~/deps/crc32c/build && git pull && CXXFLAGS="-g0 -Os" cmake -DCRC32C_BUILD_TESTS=0 -DCRC32C_BUILD_BENCHMARKS=0 -DCRC32C_USE_GLOG=0 -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_POSITION_INDEPENDENT_CODE=1 -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" -DCMAKE_LINK_SEARCH_START_STATIC=1 -DCMAKE_LINK_SEARCH_END_STATIC=1 .. && make -j4 && sudo make install VERBOSE=1
        echo "::endgroup::"
        echo "::group::Snappy"
        if [[ ! -d "$HOME/deps/snappy/.git" ]]; then git clone --branch 1.1.8 https://github.com/google/snappy.git ~/deps/snappy --depth 1 && mkdir -p ~/deps/snappy/build; fi && cd ~/deps/snappy/build && git pull && cmake -DSNAPPY_BUILD_TESTS=OFF ${COMMON_CMAKE_ARGS[*]} .. && make -j4 && sudo make install VERBOSE=1
        echo "::endgroup::"
        echo "::group::Jemalloc"
        if [[ ${ENABLE_LIBUNWIND} -eq 1 && ! -z "${LIBUNWIND_LIB}" ]]; then JEMALLOC_ARGS="--enable-prof-libunwind --with-static-libunwind=${LIBUNWIND_LIB}" ; fi
        if [[ ${ENABLE_JEMALLOC} -eq 1 ]]; then if [[ ! -d "$HOME/deps/jemalloc/.git" ]]; then git clone --branch master https://github.com/jemalloc/jemalloc.git ~/deps/jemalloc && cd ~/deps/jemalloc && ./autogen.sh; fi && cd ~/deps/jemalloc && git pull && ./configure $JEMALLOC_ARGS EXTRA_CFLAGS="${CFLAGS}" EXTRA_CXXFLAGS="${CXXFLAGS}" --disable-initial-exec-tls --without-export --disable-libdl --disable-shared --enable-xmalloc --with-malloc-conf="background_thread:true,metadata_thp:auto,percpu_arena:percpu" && make build_lib_static -j4 --no-print-directory && sudo make install VERBOSE=1 && sudo rm -rf /usr/local/lib/libjemalloc.so* /usr/local/lib/libjemalloc.a && sudo mv /usr/local/lib/libjemalloc_pic.a /usr/local/lib/libjemalloc.a; fi
        echo "::endgroup::"
        echo "::group::LevelDb"
        if [[ ! -d "$HOME/deps/leveldb/.git" ]]; then git clone --branch main https://github.com/google/leveldb.git ~/deps/leveldb --depth 1 && mkdir -p ~/deps/leveldb/build; fi && cd ~/deps/leveldb && git pull
        git checkout @ -- CMakeLists.txt &&
          ${SED} -i 's|check_library_exists[(]snappy .*|include_directories(/usr/local/include)\nfind_library(HAVE_SNAPPY NAMES libsnappy.a snappy libsnappy)|' CMakeLists.txt &&
          ${SED} -i 's/check_library_exists[(]crc32c .*/find_library(HAVE_CRC32C NAMES libcrc32c.a crc32c libcrc32c)/' CMakeLists.txt &&
          if [[ ${ENABLE_TCMALLOC} -eq 1 ]]; then
              ${SED} -i 's/check_library_exists[(]tcmalloc .*/find_library(HAVE_TCMALLOC NAMES libtcmalloc.a tcmalloc libtcmalloc)/' CMakeLists.txt;
          else
              ${SED} -i 's/check_library_exists[(]tcmalloc .*/#find_library(HAVE_TCMALLOC NAMES libtcmalloc.a tcmalloc libtcmalloc)/' CMakeLists.txt;
          fi &&
          ${SED} -i 's/target_link_libraries(leveldb crc32c)/message(STATUS "Found ${HAVE_CRC32C}")\ntarget_link_libraries(leveldb ${HAVE_CRC32C})/g' CMakeLists.txt &&
          ${SED} -i 's/target_link_libraries(leveldb snappy)/message(STATUS "Found ${HAVE_SNAPPY}")\ntarget_link_libraries(leveldb ${HAVE_SNAPPY})/g' CMakeLists.txt &&
          if [[ ${ENABLE_LIBUNWIND} -eq 1 ]]; then
              ${SED} -i 's|target_link_libraries(leveldb tcmalloc)|message(STATUS "Found ${HAVE_TCMALLOC}")\ntarget_link_libraries(leveldb ${HAVE_TCMALLOC} '$LIBUNWIND_LIB' /usr/local/lib/liblzma.a)|g' CMakeLists.txt;
          else
              ${SED} -i 's|target_link_libraries(leveldb tcmalloc)|message(STATUS "Found ${HAVE_TCMALLOC}")\ntarget_link_libraries(leveldb ${HAVE_TCMALLOC})|g' CMakeLists.txt;
          fi
        cat CMakeLists.txt
        cd build && cmake -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF -DBUILD_SHARED_LIBS=OFF ${COMMON_CMAKE_ARGS[*]} .. && make leveldb -j4 && sudo make install VERBOSE=1
        echo "::endgroup::"
        echo "::group::RocksDb"
        if [[ ! -d "$HOME/deps/rocksdb/.git" ]]; then git clone --branch v6.27.3 https://github.com/facebook/rocksdb.git ~/deps/rocksdb --depth 1 && mkdir -p ~/deps/rocksdb/build; fi && cd ~/deps/rocksdb/build && git pull && cmake -DPORTABLE=1 -DWITH_MD_LIBRARY=0 -DROCKSDB_BUILD_SHARED=0 -DWITH_GFLAGS=0 -DWITH_JEMALLOC=${ENABLE_JEMALLOC} -DWITH_SNAPPY=1 -DWITH_LZ4=1 -DWITH_ZSTD=1 -DWITH_ZLIB=1 -DWITH_BZ2=1 -DWITH_BENCHMARK_TOOLS=0 -DWITH_TOOLS=0 -DWITH_CORE_TOOLS=0 -DWITH_TESTS=0 -DUSE_RTTI=1 -DWITH_RUNTIME_DEBUG=0 -DWITH_JNI=0 -DFAIL_ON_WARNINGS=0 ${COMMON_CMAKE_ARGS[*]} .. && make -j4 && sudo make install VERBOSE=1
        echo "::endgroup::"
        echo "::group::Grpc"
        if [[ ! -d "$HOME/deps/grpc/.git" ]]; then git clone --branch v1.43.2 https://github.com/grpc/grpc ~/deps/grpc --depth 1 && mkdir -p ~/deps/grpc/build_dir; fi && cd ~/deps/grpc && git submodule update --init && cd ~/deps/grpc/build_dir && git pull && cmake -DCMAKE_BUILD_TYPE=Release DgRPC_INSTALL=ON -DBUILD_SHARED_LIBS=OFF .. && make -j4 && sudo make install VERBOSE=1 # && sudo ldconfig
        echo "::endgroup::"        
        if [[ "$RUNNER_OS" == "Linux" && ! -d "/opt/diet/lib-x86_64" ]]; then
          echo "::group::Diet"
          sudo mkdir -p /opt/diet/lib-x86_64 &&
          sudo cp ${GITHUB_WORKSPACE}/externals/dietlibc/libcompat.a /opt/diet/lib-x86_64/;
          echo "::endgroup::"
        fi        
        for lib in z bz2 lz4 zstd lzma crc32c snappy unwind jemalloc leveldb rocksdb grpc ;do sudo du -h "/usr/local/lib/lib$lib.a" "/usr/lib/x86_64-linux-gnu/lib$lib.a" 2> /dev/null || true; done
    - name: Prepare Cache Key
      if: always()
      run: |
        find ~/deps/ -type f -name "*.a" -exec cp -prv '{}' '${GITHUB_WORKSPACE}/' ';' | true #for cache key hashFiles
    - name: Save Deps to cache
      if: always() #&& steps.cache.outputs.primary-key != ${{ matrix.os }}-v4-${{ hashFiles('*.a') }}
      uses: martijnhols/actions-cache/save@v3
      with:
        path: |
          /opt/diet
          ~/deps
          ~/.cache/pip
          $HOME/Library/Caches/Homebrew
          /usr/local/Homebrew
          ~/Library/Caches/pip
        key: ${{ matrix.os }}-v4-${{ hashFiles('*.a') }}
    - name: Build Reindexer
      run: |        
        export CPLUS_INCLUDE_PATH=~/deps/grpc/third_party/abseil-cpp
        export BUILD_DIR=${GITHUB_WORKSPACE}/build
        mkdir -p ${BUILD_DIR} && cd ${BUILD_DIR}
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          (cmake ${{ env.REINDEXER_OPTS }} ${GITHUB_WORKSPACE} && make reindexer_embedded_server -j4) || cat ${BUILD_DIR}/CMakeFiles/CMakeError.log;
          find ${BUILD_DIR}/cpp_src/server/cbinding \( -name "*.so" -or -name "*.dylib" \) -exec ldd '{}' ';' | true;
        else
          (cmake ${{ env.REINDEXER_OPTS }} ${GITHUB_WORKSPACE} -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DOPENSSL_LIBRARIES=/usr/local/opt/openssl/lib && make reindexer_embedded_server -j4) || cat ${BUILD_DIR}/CMakeFiles/CMakeError.log;
          find ${BUILD_DIR}/cpp_src/server/cbinding \( -name "*.so" -or -name "*.dylib" \) -exec otool -L '{}' ';' | true;
        fi   
        
        find ${BUILD_DIR}/cpp_src/server/cbinding \( -name "*.so" -or -name "*.dylib" \) | xargs du -h
    - name: artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-lib
        path: |
            **/libreindexer_embedded_server.*
        if-no-files-found: error
